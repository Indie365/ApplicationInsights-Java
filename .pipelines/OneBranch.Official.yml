#################################################################################
#   Onebranch Pipelines - Official MSBuild (CDPXMigrated)                       #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none # https://aka.ms/obpipelines/triggers

parameters: # parameters are shown up in ADO UI in a build queue time
  - name: 'debug'
    displayName: 'Enable debug output'
    type: boolean
    default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 1
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none

  WindowsContainerImage: 'cdpxwin1809.azurecr.io/global/vse2019:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main
    - repository: ApplicationInsights-Java
      type: github
      name: microsoft/ApplicationInsights-Java
      ref: refs/heads/master
      endpoint: microsoft

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # credscan:
      #   suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      binskim:
        break: true # always break the build on binskim issues in addition to TSA upload
      policheck:
        break: true # always break the build on policheck issues. You can disable it by setting to 'false'

    stages:
      - stage: build
        jobs:
          - job: main
            pool:
              type: windows  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs

            variables:
              ob_outputDirectory: '$(Build.SourcesDirectory)\out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
              ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl
              ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}: # conditionally enable symbolsPublishing for master branch only
                ob_symbolsPublishing_enabled: true # https://aka.ms/obpipelines/symbols
              # ob_sdl_baseline_baselineFile: $(Build.SourcesDirectory)\.gdn\build.official.gdnbaselines
              # ob_sdl_codeSignValidation_excludes: -|**\*.js # Example -|**\*.js;-|**\Test*\**
              ob_artifactBaseName: 'drop'

            steps:
              - task: onebranch.pipeline.version@1 # generates automatic version. For other versioning options check https://aka.ms/obpipelines/versioning
                displayName: 'Setup BuildNumber'
                inputs:
                  system: 'RevisionCounter'
                  major: '0'
                  minor: '0'
                  exclude_commit: true

              # skip signing
              - task: onebranch.pipeline.signing@1
                inputs:
                  command: 'sign'
                  signing_profile: 'none'

              - task: CmdLine@2
                displayName: 'Run Clean'
                inputs:
                  script: '$(Build.SourcesDirectory)\.scripts\gradle.cmd test clean'
                  workingDirectory: '$(Build.SourcesDirectory)'

              - task: CmdLine@2
                displayName: 'Run Tests'
                inputs:
                  script: '$(Build.SourcesDirectory)\.scripts\gradle.cmd test'
                  workingDirectory: '$(Build.SourcesDirectory)'

              - task: CopyFiles@2
                displayName: "Copy Test Results"
                inputs:
                  testRunner: JUnit
                  SourceFolder: '**\build\test-results\test\**\*'
                  Contents: '**\*'
                  TargetFolder: '$(Build.SourcesDirectory)\out\outputs\test'
                  failTaskOnFailedTests: true

              - task: CopyFiles@2
                displayName: "Copy Test Logs"
                inputs:
                  SourceFolder: '**\build\reports\tests\**\*'
                  Contents: '**\*'
                  TargetFolder: '$(Build.SourcesDirectory)\out\outputs\logs'

              - task: CopyFiles@2
                displayName: "Copy Build Scripts"
                inputs:
                  SourceFolder: '$(Build.SourcesDirectory)\.scripts'
                  Contents: '**\*'
                  TargetFolder: '$(Build.SourcesDirectory)\out\outputs\build\Scripts'

              - task: CmdLine@2
                displayName: 'Assemble'
                inputs:
                  script: '$(Build.SourcesDirectory)\.scripts\gradle.cmd :agent:agent:publishToMavenLocal -DisRelease=true -Pai.etw.native.build=release --offline'
                  workingDirectory: '$(Build.SourcesDirectory)'

              - task: CmdLine@2
                displayName: 'Copy files from maven local repository'
                inputs:
                  script: '$(Build.SourcesDirectory)\.scripts\copy-from-maven-local.cmd'
                  workingDirectory: '$(Build.SourcesDirectory)'

              - task: CopyFiles@2
                displayName: "Copy Artifact"
                inputs:
                  SourceFolder: '$(Build.SourcesDirectory)\published'
                  Contents: '**\*'
                  TargetFolder: '$(Build.SourcesDirectory)\out\outputs\build\Artifacts'

            # Move this block before or after a task block to "see" current environment settings
            #   if environment is changed in taskblock duplicate and add before *and* after ( convention is envList.txt & envList1.txt ) to see the change.
            # - task: PowerShell@2
            #   displayName: 'Generate environment settings list'
            #   inputs:
            #     targetType: 'inline'
            #     script: |
            #       dir env: | sort name > $(Build.SourcesDirectory)\out\envList.txt

    ################################################################################################
    #                              Remove tasks below before handoff                               #
    ################################################################################################
    #        ↓
    #        ↓- task: After you uncomment below tasks, please make sure your '-' align to the first '-' of this line.
    #        ↓

    # # Uncomment this task if your CDPx yaml has publish_to_legacy_artifacts set to TRUE
    # - task: DownloadBuildArtifacts@1
    #   displayName: '⚡️Download CDPx Build Artifact'
    #   inputs:
    #     buildType: 'specific'
    #     project: '$(System.TeamProjectId)'
    #     pipeline: '<cdpx pipeline/definition ID>'
    #     buildVersionToDownload: 'specific'
    #     buildId: '<cdpx build ID>'
    #     downloadType: 'single
    #     artifactName: 'drop'
    #     downloadPath: '$(REPOROOT)\cdpxArt'

               # Uncomment this task if your CDPx yaml has publish_to_pipeline_artifacts set to TRUE
              - task: DownloadPipelineArtifact@2
                  displayName: '⚡️Download CDPx Pipeline Artifact'
                  inputs:
                    buildType: 'specific'
                    project: '$(System.TeamProjectId)'
                    definition: '<cdpx pipeline/definition ID>'
                    buildVersionToDownload: 'specific'
                    pipelineId: '<cdpx build ID>'   #Correspond the buildId in above task. The name 'pipelineId' here is a bit confusing.
                    artifactName: 'drop'
                    targetPath: '$(REPOROOT)\cdpxArt'

    # - task: Bash@3
    #   displayName: '⚡️Install Powershell'
    #   condition: ne(variables['Agent.OS'], 'Windows_NT')
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       #!/bin/bash
    #       apt-get update
    #       apt-get install -y wget apt-transport-https software-properties-common
    #       wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
    #       dpkg -i packages-microsoft-prod.deb
    #       apt-get update
    #       apt-get install -y powershell

    # - task: PowerShell@2
    #   displayName: '⚡️Diff Build Outputs'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       [System.Collections.ArrayList] $cdpxFiles = @()
    #       [System.Collections.ArrayList] $cdpxFolders = @()
    #       [System.Collections.ArrayList] $obpFiles = @()
    #       [System.Collections.ArrayList] $obpFolders = @()
    #       [System.Collections.ArrayList] $intersection = @()
    #
    #       $cdpxArtifactDirectory = Join-Path $(REPOROOT) "cdpxArt"
    #       if (($(Get-ChildItem $cdpxArtifactDirectory).Count -eq 1) -and (Test-Path $(Join-Path $cdpxArtifactDirectory "drop"))) {
    #         $cdpxOutputsDirectory = Join-Path $(Join-Path $cdpxArtifactDirectory "drop") "outputs"
    #       }
    #       else {
    #         $cdpxOutputsDirectory = Join-Path $cdpxArtifactDirectory "outputs"
    #       }
    #
    #       Get-ChildItem $cdpxOutputsDirectory -recurse -force -directory | % { $null = $cdpxFolders.Add($($_.FullName).Replace($cdpxOutputsDirectory, "")) }
    #       Get-ChildItem $cdpxOutputsDirectory -recurse -force -file | % { $null = $cdpxFiles.Add($($_.FullName).Replace($cdpxOutputsDirectory, "")) }
    #
    #       $obpOutputsDirectory = Join-Path $(ob_outputDirectory) "outputs"
    #       Get-ChildItem $obpOutputsDirectory -recurse -force -directory | % { $null = $obpFolders.Add($($_.FullName).Replace($obpOutputsDirectory, "")) }
    #       Get-ChildItem $obpOutputsDirectory -recurse -force -file | % { $null = $obpFiles.Add($($_.FullName).Replace($obpOutputsDirectory, "")) }
    #
    #       Write-Output "CDPx build metadata:"
    #       Write-Output "    Directories: $($cdpxFolders.Count)"
    #       Write-Output "    Files: $($cdpxFiles.Count)"
    #
    #       Write-Output "OBP build metadata:"
    #       Write-Output "    Directories: $($obpFolders.Count)"
    #       Write-Output "    Files: $($obpFiles.Count)"
    #       Write-Output "--------------------------------------------------"
    #
    #       foreach ($file in $cdpxFiles) {
    #         if ($obpFiles.Contains($file)) {
    #           $null = $intersection.Add($file)
    #         }
    #       }
    #
    #       foreach ($file in $intersection) {
    #         $obpFiles.Remove($file)
    #         $cdpxFiles.Remove($file)
    #       }
    #
    #       Write-Output "CDPx build files missing in OBP build:"
    #       $cdpxFiles | % { Write-Output "    $_" }
    #       Write-Output "OBP build files missing in CDPx build:"
    #       $obpFiles | % { Write-Output "    $_" }
    #
    #       Remove-Item $cdpxArtifactDirectory -recurse -force